dp PC(out pc_out : ns(5)){
	reg a : ns(5);

	always{
		a = a + 1;
		pc_out = a + 1;
	}
	
}

dp Registerfile(in asel, bsel, storesel : ns(3); in storeenable : ns(1); in storedata : tc(32); out a, b : tc(32)) {
	reg one : tc(32);	
	reg two : tc(32);  	
	reg three : tc(32);	
	reg four : tc(32);		
	reg five : tc(32);	
	reg six : tc(32);	
	reg seven : tc(32);
	reg eight : tc(32);
	
	always {
		a = asel==0 ? one : 
		asel==1 ? two : 
		asel==2 ? three :
		asel==3 ? four :
		asel==4 ? five :
		asel==5 ? six :
		asel==6 ? seven :
		asel==7 ? eight : 0;

		b = bsel==0 ? one : 
		bsel==1 ? two : 
		bsel==2 ? three :
		bsel==3 ? four :
		bsel==4 ? five :
		bsel==5 ? six :
		bsel==6 ? seven :
		bsel==7 ? eight : 0;

		two = storesel==1 & storeenable ? storedata : two;
		three = storesel==2 & storeenable ? storedata : three;
		four = storesel==3 & storeenable ? storedata : four;
		five = storesel==4 & storeenable ? storedata : five;
		six = storesel==5 & storeenable ? storedata : six;
		seven = storesel==6 & storeenable ? storedata : seven;
		eight = storesel==7 & storeenable ? storedata : eight;
	}
}

ipblock instmem(in address : ns(5);
				in wr,rd : ns(1);
				in idata : ns(32);
				out odata : ns(32)){

	iptype "ram";
	ipparm "size=64";
	ipparm "wl=32";
	ipparm "file=program.txt";
}

dp InstructionFetch(out odata : ns(32)){
	sig counter : ns(5);

	use PC(counter);
	use instmem(counter, 0, 1, 0, odata);
}

dp Controller(in opcode : ns(5); in zero, neg : ns(1); out jflag, iflag, storeflag: ns(1); out alufunc : ns(3)){
	always {
		alufunc = opcode[4] == 0 ? opcode[0:2] : 0;
		storeflag = opcode[4] == 0;
		iflag = opcode[3];
		jflag = opcode[4] == 1 & opcode[3] == 1 ? 
								(opcode[0] == 1 ? 1 : 
								(opcode[1] == 1 & zero == 1 ? 1 : 
								(opcode[2] == 1 & neg == 1 ? 1 : 0))) : 0;
	}
}

dp System(in zero, neg : ns(1);   in storedata : tc(32);   out jflag, iflag : ns(1);   out alufunc : ns(3);   out a, b : tc(32)){
	sig odata : ns(32);
	sig storeflag : ns(1);

	use InstructionFetch(odata);
	use Controller(odata[27:31], zero, neg, jflag, iflag, storeflag, alufunc);
	use Registerfile(odata[24:26], odata[20:22], odata[22:24], storeflag, storedata, a, b);


}

dp testSys(out zero, neg : ns(1);   out storedata : tc(32);   in jflag, iflag : ns(1);   in alufunc : ns(3);   in a, b : tc(32)) { 
	always{
		$display($bin, "Alufunc:", alufunc,  " Jflag:", jflag,  " Iflag:", iflag,  " a:", a,  " b:", b);
	}

	sfg test_0 {zero = 0; neg = 0; storedata = 1;}
	sfg test_1 {zero = 0; neg = 0; storedata = 1;}
	sfg test_2 {zero = 0; neg = 0; storedata = 1;}
	sfg test_3 {zero = 0; neg = 0; storedata = 1;}
	sfg test_4 {zero = 0; neg = 0; storedata = 1;}
	sfg test_5 {zero = 0; neg = 0; storedata = 1;}
	sfg test_6 {zero = 0; neg = 0; storedata = 1;}
	sfg test_7 {zero = 0; neg = 0; storedata = 1;}
	sfg test_8 {zero = 1; neg = 0; storedata = 1;}
	sfg test_9 {zero = 0; neg = 1; storedata = 1;}
}

// state machine to control testbench
fsm f_testbench(testSys){
	initial s0; // begin with state s0
	state s1, s2, s3, s4, s5, s6, s7, s8, s9; // other states are: s1, s2
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s2; // run test_1 and go to s2
	@s2 (test_2) -> s3;
	@s3 (test_3) -> s4;
	@s4 (test_4) -> s5;
	@s5 (test_5) -> s6;
	@s6 (test_6) -> s7;
	@s7 (test_7) -> s8;
	@s8 (test_8) -> s9;
	@s9 (test_9) -> s0;
}

system program{
	System(zero, neg, storedata, jflag, iflag, storeflag, alufunc, a, b);
	testSys(zero, neg, storedata, jflag, iflag, storeflag, alufunc, a, b);
}