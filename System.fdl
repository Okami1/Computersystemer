$option "vcd"

dp PC(in altAddress : ns(16);  in select : ns(1);  out pc_out : ns(16)){
	reg a : ns(16);

	$trace(a, "Testtraces/address.seq");
	always{
		//$display($dec, "pc_out:",pc_out);
		pc_out = select ? altAddress : a + 1;
		a = pc_out;
	}
	
}

dp Multiplexer(in a, b : tc(32); in select : ns(1); out r : tc(32)) {
	always {
		r = select ? a : b;
	}
}

dp ALUFlags(in a, b : tc(32); in select : ns(3); out r : tc(32); out n, z : ns(1)) {
	reg zero, neg : ns(1);
	sig x : tc(32);
	sig y : tc(32);
	sig xx : tc(32);

	always {
		x = select[2] ? a : a+b;		
		y = select[0] ? a >> b : b;
		xx = select[1] ? y : x;

		r = select[2] ? xx : select[1] ? a-b : xx;
		
		zero = r ? 0 : 1;
		neg = r[31];

		n = neg;
		z = zero;

		//$display($dec, "Out:",r, " Zero:",z, " Neg:",n);
	}
}

dp Registerfile(in  storesel, asel, bsel : ns(3); in storeenable : ns(1); in storedata : tc(32); out a, b : tc(32)) {
	reg one : tc(32);	
	reg two : tc(32);  	
	reg three : tc(32);	
	reg four : tc(32);		
	reg five : tc(32);	
	reg six : tc(32);	
	reg seven : tc(32);
	reg eight : tc(32);
	
	$trace(storesel, "Testtraces/storesel.seq");
	$trace(two, "Testtraces/two.seq");
	$trace(three, "Testtraces/three.seq");
	always {
		a = asel==0 ? one : 
		asel==1 ? two : 
		asel==2 ? three :
		asel==3 ? four :
		asel==4 ? five :
		asel==5 ? six :
		asel==6 ? seven :
		asel==7 ? eight : 0;

		b = bsel==0 ? one : 
		bsel==1 ? two : 
		bsel==2 ? three :
		bsel==3 ? four :
		bsel==4 ? five :
		bsel==5 ? six :
		bsel==6 ? seven :
		bsel==7 ? eight : 0;

		two = storesel==1 & storeenable ? storedata : two;
		three = storesel==2 & storeenable ? storedata : three;
		four = storesel==3 & storeenable ? storedata : four;
		five = storesel==4 & storeenable ? storedata : five;
		six = storesel==5 & storeenable ? storedata : six;
		seven = storesel==6 & storeenable ? storedata : seven;
		eight = storesel==7 & storeenable ? storedata : eight;

		$display($dec, "Two:",two, " three:",three);
	}
}

ipblock instmem(in address : ns(16);
				in wr,rd : ns(1);
				in idata : ns(32);
				out odata : ns(32)){

	iptype "ram";
	ipparm "size=64";
	ipparm "wl=32";
	ipparm "file=program2.txt";
}

dp InstructionFetch(in altAddress : ns(16);  in select : ns(1);  out odata : ns(32)){
	sig counter : ns(16);

	use PC(altAddress, select, counter);
	use instmem(counter, 0, 1, 0, odata);
}

dp Controller(in opcode : ns(5); in zero, neg : ns(1); out jflag, iflag, storeflag: ns(1); out alufunc : ns(3); out dataflag : ns(1)){

	always {
		alufunc = opcode[4] == 0 ? opcode[0:2] : 0;
		storeflag = opcode[4] ? opcode[3] == 0 & opcode[0] : 1;
		iflag = opcode[4] == 0 & opcode[3] == 1;
		jflag = opcode[4] == 1 & opcode[3] == 1 ? (opcode[0] == 1 ? 1 : (opcode[1] == 1 & zero == 1 ? 1 : (opcode[2] == 1 & neg == 1 ? 1 : 0))) : 0;

		dataflag = opcode[4] & opcode[3] == 0;
		alufunc = opcode[4] & opcode[3] == 0 ? (opcode[0] ? 4 : 5) : alufunc;
	}
}

dp System(){ //in zero, neg : ns(1);   in storedata : tc(32);   out jflag, iflag : ns(1);   out alufunc : ns(3);   out a,r : tc(32)
	sig odata : ns(32);
	sig storeflag : ns(1);
	sig b : tc(32);

	sig a : tc(32);
	sig r : tc(32);
	sig alufunc : ns(3);
	sig storedata : tc(32);
	sig neg : ns(1);
	sig zero : ns(1);
	sig jflag : ns(1);
	sig iflag : ns(1);
	
	sig dataflag : ns(1);

	$trace(zero, "Testtraces/zero.seq");
	$trace(neg, "Testtraces/neg.seq");

	$trace(jflag, "Testtraces/jflag.seq");
	$trace(alufunc, "Testtraces/alufunc.seq");
	$trace(storeflag, "Testtraces/storeflag.seq");

	use InstructionFetch(odata[11:26], jflag, odata);
	use Controller(odata[27:31], zero, neg, jflag, iflag, storeflag, alufunc, dataflag);
	use Registerfile(odata[24:26], odata[21:23], odata[18:20], storeflag, storedata, a, b);

	use Multiplexer(odata[10:20], b, iflag, r);
	
	use ALUFlags(a, r, alufunc, storedata, neg, zero);

	// use Multiplexer(); Tag resultat fra ALU'en undtagen, hvis der er snakke om en load funktion

}

dp testSys() { //out zero, neg : ns(1);   out storedata : tc(32);   in jflag, iflag : ns(1);   in alufunc : ns(3);   in a,r : tc(32)
	//always{
	//	$display($bin, "Alufunc:", alufunc,  " Jflag:", jflag,  " Iflag:", iflag, $dec,  " a:", a,  " r:", r);
	//}

	sfg test_0 {}
	sfg test_1 {}
}

// state machine to control testbench
fsm f_testbench(testSys){
	initial s0; // begin with state s0
	state s1, s2, s3, s4, s5, s6, s7, s8, s9;
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s0; // run test_1 and go to s2
}

system program{
	System; //zero, neg, storedata, jflag, iflag, storeflag, alufunc, a, r
	testSys;
}